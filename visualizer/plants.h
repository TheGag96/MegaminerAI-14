#ifndef PLANTS_H
#define PLANTS_H

#include <QObject>
#include <QThread>
#include "igame.h"
#include "animsequence.h"
#include <map>
#include <string>
#include <list>

// The Codegen's Parser
#include "parser/parser.h"
#include "parser/structures.h"

using namespace std;

namespace visualizer
{
	struct Rect
	{
		int left;
		int top;
		int right;
		int bottom;
	};

    class Plants: public QThread, public AnimSequence, public IGame
    {
        Q_OBJECT;
        Q_INTERFACES( visualizer::IGame );
        public: 
            Plants();
            ~Plants();

            PluginInfo getPluginInfo();
            void loadGamelog( std::string gamelog );

            void run();
            void setup();
            void destroy();

            void preDraw();
            void postDraw();

            void addCurrentBoard();
    
            map<string, int> programs;
            
            list<int> getSelectedUnits();
        private:
            parser::Game *m_game;  // The Game Object from parser/structures.h that is generated by the Codegen
            bool m_suicide;
			list<int> m_SelectedUnits;
            
			int getWidth() const { return m_game->states[0].mapWidth; }
			int getHeight() const { return m_game->states[0].mapHeight; }
			Color getPlayerColor(int id) const { return (id == 1) ? Color(0.9,0.2,0.2,1) : Color(0.2,0.2,0.9,1); }
            string getPlantFromID(int id) const;
			void ProcessInput();
			void GetSelectedRect(Rect &out) const;
			std::list<IGUI::DebugOption> getDebugOptions();
			static const float GRID_OFFSET;
	};

} // visualizer

#endif // PLANTS_H
